// ğŸŸ£=============================
// REACT NATIVE KAVRAM NOTLARI
// =============================

/*
âœ… Self-closing nedir?
- KapanÄ±ÅŸ etiketi olmadan yazÄ±lan, kendi kendini kapatan tag.
- Ã–rnek:
  <Image /> // self-closing
  <Image></Image> // aynÄ± anlama gelir, ama uzun yazÄ±m
*/

/*
âœ… SafeAreaView kullanmak her zaman mantÄ±klÄ± mÄ±?
- iOS cihazlarda Ã¼stteki Ã§entik vb. yÃ¼zÃ¼nden mantÄ±klÄ±dÄ±r.
- Androidâ€™de ÅŸart deÄŸildir ama Ã§apraz platform uyumu iÃ§in kullanÄ±lÄ±r.
*/

/*
âœ… Alert nedir, nerede kullanÄ±lÄ±r?
- Ekrana pop-up ÅŸeklinde bilgi, uyarÄ±, onay mesajÄ± Ã§Ä±karÄ±r.
- Ã–rnek:
  Alert.alert("UyarÄ±", "Kaydedildi!");
*/

/*
âœ… console.log appte gÃ¶zÃ¼kÃ¼r mÃ¼?
- HayÄ±r, sadece terminalde (VSCode console veya Expo console) gÃ¶rÃ¼nÃ¼r.
- KullanÄ±cÄ±ya gÃ¶stermez.
*/

// ==============================
// COMPONENT KAVRAMLARI
// ==============================

/*
âœ… Component ne demek?
- Ekranda gÃ¶rÃ¼nen veya gÃ¶rÃ¼nmeyen yapÄ± taÅŸlarÄ±dÄ±r.
- Ã–rn: Buton, Text, View, ScrollView hepsi componenttir.
- React Native componentlerin birleÅŸimiyle app oluÅŸturur.
*/

/*
âœ… TouchableOpacity vs Pressable farkÄ±?
- TouchableOpacity:
  - Dokununca opacity (saydamlÄ±k) deÄŸiÅŸir, klasik buton etkisi.
- Pressable:
  - Daha esnek, basÄ±lÄ± tutma gibi eventleri de yakalar.
  - Yeni projelerde genelde Pressable tercih edilir.
*/

/*
âœ… FlatList ne zaman kullanÄ±lÄ±r?
- Ã‡ok sayÄ±da liste elemanÄ± varsa (Ã¶r. 1000 Ã¼rÃ¼n) performanslÄ± render iÃ§in.
- ScrollView tÃ¼m listeyi yÃ¼kler, FlatList sadece gÃ¶rÃ¼nen kÄ±smÄ± yÃ¼kler.
*/

/*
âœ… ScrollView vs FlatList farkÄ±?
- ScrollView:
  - Az elemanlÄ± listeler iÃ§in.
  - TÃ¼m iÃ§eriÄŸi RAMâ€™e yÃ¼kler.
- FlatList:
  - Ã‡ok elemanlÄ± listeler iÃ§in.
  - GÃ¶rÃ¼nen kadarÄ±nÄ± yÃ¼kler, performans dostudur.
*/

// JSX Ä°Ã§inde DeÄŸiÅŸken KullanÄ±mÄ± ve Template Literal FarkÄ±

// React Native'de JSX yapÄ±sÄ± iÃ§inde JavaScript ifadelerini gÃ¶stermek iÃ§in sÃ¼slÃ¼ parantez {} kullanÄ±lÄ±r.
let isim = "Nurdan";

// JSX Ã¶rneÄŸi: isim deÄŸiÅŸkenini Text iÃ§inde gÃ¶stermek iÃ§in
// Ekranda "Nurdan" yazacaktÄ±r
// <Text>{isim}</Text>

// ----------------------------------------------

// Template literal (ÅŸablon string) ise JavaScript'in bir Ã¶zelliÄŸidir.
// String iÃ§ine deÄŸiÅŸken veya ifade gÃ¶mmek iÃ§in ters tÄ±rnak ` ve ${} kullanÄ±lÄ±r.

console.log(`Merhaba, ${isim}`);  // Konsola "Merhaba, Nurdan" yazar

// ----------------------------------------------

// Ã–zet:
// JSX (React Native iÃ§inde)           => {isim}
// JavaScript string birleÅŸtirme       => `Merhaba, ${isim}`

// Not: JSX iÃ§inde template literal kullanmak iÃ§in sÃ¼slÃ¼ parantezle birlikte kullanmalÄ±sÄ±n:
// <Text>{`Merhaba, ${isim}`}</Text>


// ===== React Native Temel KonularÄ± =====

// 1. JSX ve Component YapÄ±sÄ±
// React Native'de arayÃ¼zler JSX ile yazÄ±lÄ±r. JSX, JavaScript iÃ§inde HTML benzeri yapÄ±dÄ±r.
// Componentler (bileÅŸenler) UI parÃ§alarÄ±dÄ±r. Fonksiyon olarak yazÄ±lÄ±rlar ve UI dÃ¶nerler.

import React from 'react';
import { View, Text } from 'react-native';

export default function App() {
  return (
    <View>
      <Text>Merhaba React Native!</Text>
    </View>
  );
}

// 2. Temel BileÅŸenler (Components)
// View: Kutu, blok yapar. Container gibi.
// Text: Ekrana yazÄ± yazdÄ±rÄ±r.
// Image: GÃ¶rsel ekler.
// SafeAreaView: iPhone Ã§entiÄŸi gibi alanlarda gÃ¼venli alan saÄŸlar.
// ScrollView: Uzun iÃ§erik iÃ§in kaydÄ±rÄ±labilir alan.
// TouchableOpacity / Pressable: Dokunulabilir buton benzeri alanlar.
// FlatList: PerformanslÄ± liste gÃ¶sterir.
// Modal: Popup pencere gÃ¶sterir.

// Ã–rnek View ve Text
/*
<View style={{ padding: 20 }}>
  <Text style={{ fontSize: 18 }}>Basit bir metin</Text>
</View>
*/

// 3. Stil (Styling)
// React Native'de stil objeler ÅŸeklinde yazÄ±lÄ±r. CSS'ye benzese de farklÄ±dÄ±r.
// Stil, StyleSheet.create ile tanÄ±mlanabilir veya direkt inline verilebilir.

// Ã–rnek stil
/*
const styles = StyleSheet.create({
  kutu: {
    backgroundColor: 'pink',
    padding: 20,
    alignItems: 'center',
  },
  yazi: {
    fontSize: 24,
    color: 'white',
    fontWeight: 'bold',
  }
});
*/

// 4. Event Handling (Etkinlik YÃ¶netimi)
// KullanÄ±cÄ± etkileÅŸimleri onPress gibi eventlerle yakalanÄ±r.

// Ã–rnek Buton (TouchableOpacity) ve onPress
/*
<TouchableOpacity onPress={() => alert('Butona basÄ±ldÄ±!')}>
  <Text>Bas</Text>
</TouchableOpacity>
*/

// 5. State YÃ¶netimi (useState)
// useState Hook'u bileÅŸen iÃ§i durumu (state) yÃ¶netir.
// Ã–rnek: Butona basÄ±nca yazÄ± deÄŸiÅŸsin

/*
const [yazi, setYazi] = React.useState("Merhaba");
<TouchableOpacity onPress={() => setYazi("DeÄŸiÅŸti")}>
  <Text>{yazi}</Text>
</TouchableOpacity>
*/

// 6. JSX ve JavaScript KullanÄ±mÄ±
// JSX iÃ§inde JavaScript ifadeleri {} iÃ§ine yazÄ±lÄ±r.
// Template literal (`` `Metin ${degisken}` ``) ise JS'de string iÃ§ine deÄŸiÅŸken gÃ¶mmek iÃ§in.

// Ã–rnek:
/*
const isim = "Nurdan";
<Text>{`Merhaba, ${isim}`}</Text>
*/

//useState kullanÄ±rken genelde deÄŸiÅŸken kÃ¼Ã§Ã¼k harfle baÅŸlar, set ile yazarken ilk harf bÃ¼yÃ¼k kalanÄ± aynÄ± yazÄ±lÄ±r
//[araba,setAaraba], [ARAba,setARAba], [aRABA,setARABA]


